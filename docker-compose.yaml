version: "3.7"

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2183:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2183
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
      - ./raw_data:/minio/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres-airflow:
    image: postgres:13
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow_pass
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5

  # new service
  postgres-warehouse:
    image: postgres:13
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=spotify
      - POSTGRES_PASSWORD=spotify_pass
      - POSTGRES_DB=spotify_db
    volumes:
      - postgres-warehouse-volume:/var/lib/postgresql/data
    command: 
      - "postgres"
      - "-c"
      - "listen_addresses=*"
      # - "-c"
      # - "max_connections=100"
    

  airflow-webserver:
    image: apache/airflow:2.7.0-python3.11
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow_pass@postgres-airflow/airflow
      - AIRFLOW_CONN_WAREHOUSE_POSTGRES='postgresql://spotify:spotify_pass@postgres-warehouse:5432/spotify_db'
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=300
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY:-}
      - PYTHONPATH=/opt/airflow/project
      - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=10
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=1000
      - AIRFLOW__SCHEDULER__DAG_FILE_PROCESSOR_TIMEOUT=1000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./:/opt/airflow/project
      - ./gx:/opt/airflow/project/gx
      - ./requirements.txt:/requirements.txt
    ports:
      - "8080:8080"
    command: >
      bash -c "
        python --version
        pip install --upgrade pip &&
        pip install -r /requirements.txt &&
        airflow webserver
      "
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.0-python3.11
    depends_on:
      - airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow_pass@postgres-airflow/airflow
      - AIRFLOW_CONN_WAREHOUSE_POSTGRES='postgresql://spotify:spotify_pass@postgres-warehouse:5432/spotify_db'
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=300
      - AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL=10
      - PYTHONPATH=/opt/airflow/project
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=1000
      - AIRFLOW__SCHEDULER__DAG_FILE_PROCESSOR_TIMEOUT=1000
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./:/opt/airflow/project
      - ./gx:/opt/airflow/project/gx
      - ./requirements.txt:/requirements.txt
    command: >
      bash -c "
        pip install --upgrade pip &&
        pip install -r /requirements.txt &&
        airflow scheduler
      "
    env_file:
      - .env

  airflow-init:
    image: apache/airflow:2.7.0-python3.11
    depends_on:
      - postgres-airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow_pass@postgres-airflow/airflow
      - AIRFLOW_CONN_WAREHOUSE_POSTGRES='postgresql://spotify:spotify_pass@postgres-warehouse:5432/spotify_db'
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=300
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=1000
      - AIRFLOW__SCHEDULER__DAG_FILE_PROCESSOR_TIMEOUT=1000
    env_file:
      - .env
    command: >
      bash -c "
        airflow db init &&
        airflow users create -r Admin -u admin -p admin_password -e admin@example.com -f Admin -l User
      "
  
volumes:
  minio_data:
  postgres-db-volume:
  postgres-warehouse-volume:
